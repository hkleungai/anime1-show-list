doctype html
html(lang='zh-Hant')

    head
        meta(name='description' content='anime1.me 全季度動漫列表')
        meta(name='viewport' content='width=device-width, initial-scale=1.0')

        title.
            anime1.me 全季度動漫列表

        style(type='text/css').
            body {
                padding: 8px;
                font-size: 20px;
            }

            header {
                padding-bottom: 32px;
                font-size: 2em;
                font-weight: bold;
            }

            main {
                display: flex;
                flex-direction: column;
                gap: 32px;
            }

            table, th, td {
                border: 1px solid black;
                border-collapse: collapse;
            }
            table {
                table-layout: fixed;
                width: 100%;
            }
            th {
                font-weight: normal;
                text-align: center;
            }
            td {
                word-break: break-word;
                padding: 4px;
            }

            a { text-decoration: none; }
            a:hover { text-decoration: underline; }

            .not-allowed { cursor: not-allowed; }

            .year input { display: none; }
            .season__table table { display: none; }

            .season-label__outer {
                display: flex;
                flex-direction: row;
                border: 1px solid black;
                height: 48px;
                border-bottom: 0;
                align-items: center;
                justify-content: center;
                gap: 8px;
                padding: 8px;
            }

            .season-label__outer label {
                width: 100%;
                text-align: center;
                align-content: center;
                border: 1px dotted black;
                border-radius: 10px;
                height: 75%;
            }

        -   let season_count = 1;

        while season_count <= 4
            -   const nth_type = `:nth-of-type(${season_count})`;
            -   const nth_input_checked = `.year input${nth_type}:checked`;
            -   const nth_input_unchecked = `.year input${nth_type}:not(:checked)`;

            style.
                #{nth_input_checked} ~ .season__table table#{nth_type} {
                    display: table;
                }
                #{nth_input_checked} ~ .season-label__outer label#{nth_type} {
                    color: black;
                    font-weight: bold;
                    border-style: solid;
                    border-width: 2px;
                }
                #{nth_input_unchecked} ~ .season-label__outer label#{nth_type}:hover {
                    cursor: pointer;
                    color: black;
                    font-size: 22px;
                    margin-top: -1px;
                    border-width: 2px;
                }

            -   season_count += 1


    body
        header.
            anime1.me 全季度動漫列表

        main
            -   const year_group = Object.groupBy(list, x => x.year);
            -   const years = Object.keys(year_group).sort((a, b) => b - a);

            for year in years
                section(class='year' id=year)
                    -   const season_group = Object.groupBy(year_group[year], x => x.season);
                    -   function create_label_id(season) { return `input-id__${year}-${season}` };

                    -   let season_count = 0;

                    for _, season in season_group
                        input(
                            type='radio'
                            name=`input-name__${year}`
                            id=create_label_id(season)
                            checked=(season_count === 0)
                        ).

                        -   season_count++

                    div(class='season-label__outer')
                        for _, season in season_group
                            label(for=create_label_id(season)).
                                #{year}，#{season}

                    div(class='season__table')
                        for season_shows, season in season_group
                            -   const week_group = Object.groupBy(season_shows, x => x.weekday);

                            table
                                thead
                                    tr
                                        for shows, weekday in week_group
                                            th.
                                                #{weekday}

                                tbody
                                    -   let row_height = 0;
                                    -
                                        const max_height = Math.max(
                                            ...Object.values(week_group).map(g => g.length)
                                        );

                                    while row_height < max_height
                                        tr
                                            for shows, weekday in week_group
                                                td
                                                    if row_height < shows.length
                                                        -   const show = shows[row_height];

                                                        if show.link
                                                            a(href=show.link).
                                                                #{show.name}
                                                        else
                                                            span(class='not-allowed').
                                                                #{show.name}

                                        -   row_height += 1;
