doctype html
html(lang = 'zh-Hant')
    -   const year_group = Object.groupBy(list, x => x.year);
    -   const years = Object.keys(year_group).sort((a, b) => b - a);

    head
        meta(name = 'description'   content = 'anime1.me 全季度動漫列表').
        meta(name = 'viewport'      content = 'width=device-width, initial-scale=1.0').

        title.
            anime1.me 全季度動漫列表

        -   let display_block = [];
        -   let display_table = [];
        -   let checked_label = [];
        -   let unchecked_label_hover = [];

        -   let year_count = 1;
        while year_count <= years.length
            -   const label = '.nav.nav__grid-col-5 label';
            -   const nth_type = `:nth-of-type(${year_count})`;
            -   const checked_input = `main > input${nth_type}:checked`;
            -   const unchecked_input = `main > input${nth_type}:not(:checked)`;
            -   display_block.push(`${checked_input} ~ .year_group section.year${nth_type}`);
            -   checked_label.push(`${checked_input} ~ ${label}${nth_type}`);
            -   unchecked_label_hover.push(`${unchecked_input} ~ ${label}${nth_type}:hover`);
            -   year_count += 1;

        -   let season_count = 1;
        while season_count <= 4
            -   const label = '.nav.nav__flex label';
            -   const nth_type = `:nth-of-type(${season_count})`;
            -   const checked_input = `.year > input${nth_type}:checked`;
            -   const unchecked_input = `.year > input${nth_type}:not(:checked)`;
            -   display_table.push(`${checked_input} ~ .season-group table${nth_type}`);
            -   checked_label.push(`${checked_input} ~ ${label}${nth_type}`);
            -   unchecked_label_hover.push(`${unchecked_input} ~ ${label}${nth_type}:hover`);
            -   season_count += 1;

        style(type = 'text/css').
            body {
                padding: 8px;
                font-size: 20px;
            }

            header {
                padding-bottom: 32px;
                font-size: 2em;
                font-weight: bold;
            }

            table, th, td {
                border: 1px solid black;
                border-collapse: collapse;
            }
            table {
                table-layout: fixed;
                width: 100%;
            }
            th {
                font-weight: normal;
                text-align: center;
            }
            td {
                word-break: break-word;
                padding: 4px;
            }

            td.deleted {
                background: repeating-linear-gradient(-45deg, grey 0 2px, #ccc 0 10px);
            }

            a { text-decoration: none; }
            a:hover { text-decoration: underline; }

            .not-allowed { cursor: not-allowed; }

            main > input { display: none; }
            .year_group > section { display: none; }
            .year > input { display: none; }
            .season-group > table { display: none; }

            .nav {
                border: 1px solid black;
                border-bottom: 0;
                gap: 8px;
                padding: 8px;
            }

            .nav__flex {
                display: flex;
                flex-direction: row;
                align-items: center;
                justify-content: center;
            }

            .nav__grid-col-5 {
                display: grid;
                grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
            }

            .nav > label {
                width: 100%;
                text-align: center;
                align-content: center;
                border: 1px dotted black;
                border-radius: 10px;
                height: 38px;
            }

            !{display_block.join(',\n')} { display: block; }

            !{display_table.join(',\n')} { display: table; }

            !{checked_label.join(',\n')} {
                color: black;
                font-weight: bold;
                border-style: solid;
                border-width: 2px;
            }

            !{unchecked_label_hover.join(',\n')} {
                cursor: pointer;
                color: black;
                font-size: 22px;
                margin-top: -1px;
                border-width: 2px;
            }
    body
        header.
            anime1.me 全季度動漫列表

        main
            -
                function create_year_toggle_label_id(year) {
                    return `input-id__year-toggle__${year}`;
                };

            -   let should_checked_year = true;
            for year in years
                input(
                    checked = should_checked_year
                    id      = create_year_toggle_label_id(year)
                    name    = 'input-name__year-toggle'
                    type    = 'radio'
                ).
                -   should_checked_year = false;

            nav(class = 'nav nav__grid-col-5')
                for year in years
                    label(for = create_year_toggle_label_id(year)).
                        #{year}年

            section(class = 'year_group')
                for year in years
                    section(
                        class = 'year'
                        id = year
                    )
                        -   const season_group = Object.groupBy(year_group[year], x => x.season);
                        -
                            function create_season_toggle_label_id(season) {
                                return `input-id__season-toggle__${year}-${season}`;
                            };

                        -   let should_checked_season = true;
                        for _, season in season_group
                            input(
                                checked = should_checked_season
                                id      = create_season_toggle_label_id(season)
                                name    = `input-name__season-toggle__${year}`
                                type    = 'radio'
                            ).
                            -   should_checked_season = false;

                        nav(class = 'nav nav__flex')
                            for _, season in season_group
                                label(for = create_season_toggle_label_id(season)).
                                    #{season}季

                        section(class = 'season-group')
                            for season_shows, season in season_group
                                -
                                    const week_group = (
                                        Object.groupBy(season_shows, x => x.weekday)
                                    );

                                table(id = `table-id__${year}-${season}`)
                                    thead
                                        tr
                                            for shows, weekday in week_group
                                                th.
                                                    #{weekday}

                                    tbody
                                        -   let row_height = 0;
                                        -
                                            const max_height = Math.max(
                                                ...Object.values(week_group).map(g => g.length)
                                            );

                                        while row_height < max_height
                                            tr
                                                for shows, weekday in week_group
                                                    if row_height < shows.length
                                                        -   const show = shows[row_height];

                                                        td
                                                            if show.link
                                                                a(href = show.link).
                                                                    #{show.name}
                                                            else
                                                                span(class = 'not-allowed').
                                                                    #{show.name}
                                                    else if row_height === shows.length
                                                        td(
                                                            class = 'deleted'
                                                            rowspan = max_height - row_height
                                                        ).

                                            -   row_height += 1;
